apply plugin: 'com.android.application'
apply plugin: 'robolectric'

android {
    compileSdkVersion 20
    buildToolsVersion "20.0.0"

    defaultConfig {
        applicationId "com.mobiquity.gradletemplate"
        minSdkVersion 15
        targetSdkVersion 20
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testCoverageEnabled false
        }
        debug {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable true
            testCoverageEnabled true
        }
    }

    sourceSets {
        androidTest.setRoot('src/test')
    }

    lintOptions {
        abortOnError false
        disable 'InvalidPackage'
    }

    productFlavors {
    }
}


dependencies {
    // Libraries
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // ================== TESTING LIBRARIES ======================
    androidTestCompile 'junit:junit:4.11'
    androidTestCompile ('org.robolectric:robolectric:2.3') {
        exclude group: 'commons-logging'
        exclude group: 'org.apache.httpcomponents'
    }
}

robolectric {
    // configure the set of classes for JUnit tests
    include '**/*Test.class'
    //exclude '**/espresso/**/*.class'

    // configure max heap size of the test JVM
    maxHeapSize = '2048m'

    // configure whether failing tests should fail the build
    //ignoreFailures true
}

apply plugin: "jacoco"
jacoco {
    toolVersion = "0.7.1.201405082137"
}


def coverageSourceDirs = [
        '../app/src/main/java'
]

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebug") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: '../app/build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../app/build/jacoco/testDebug.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }
}